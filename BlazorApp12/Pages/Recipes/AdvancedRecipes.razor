@page "/advanced-recipes"
@using BlazorApp12.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.Text.Json
@using System.Text.Json.Serialization

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        width: 100%;
        text-align: center;
    }

        .modal-content h4 {
            margin-top: 0;
        }

        .modal-content .btn {
            margin: 5px;
        }

    .section {
        margin-bottom: 20px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

        .section h4 {
            margin-top: 0;
            color: #333;
        }

    .action-button {
        width: 100px;
        text-align: center;
    }

    .pagination {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }

        .pagination .btn-gold {
            min-width: 40px;
            background-color: #ffc107;
            border-color: #ffc107;
            color: #333;
        }

            .pagination .btn-gold:hover {
                background-color: #e0a800;
                border-color: #e0a800;
            }

    .btn-yellow {
        background-color: #ffc107;
        border-color: #ffc107;
        color: #333;
    }

        .btn-yellow:hover {
            background-color: #e0a800;
            border-color: #e0a800;
        }

    .btn-red {
        background-color: #dc3545;
        border-color: #dc3545;
        color: #fff;
    }

        .btn-red:hover {
            background-color: #c82333;
            border-color: #c82333;
        }

    .btn-halfwidth {
        width: 49.5%;
        margin-right: 1%;
    }

        .btn-halfwidth:last-child {
            margin-right: 0;
        }

    .button-row {
        display: flex;
        justify-content: space-between;
        margin-top: 15px;
    }

    .description-cell {
        max-width: 200px;
        overflow-wrap: break-word;
        white-space: normal;
    }

    .btn-fullwidth {
        width: 100%;
    }

    .result-title {
        margin-top: 20px;
        margin-bottom: 20px;
        color: #333;
    }

    .table-fixed {
        table-layout: fixed;
        width: 100%;
    }

        .table-fixed th, .table-fixed td {
            overflow: hidden;
            text-overflow: ellipsis;
        }

    .col-title {
        width: 15%;
    }

    .col-description {
        width: 20%;
    }

    .col-cooking-time {
        width: 10%;
    }

    .col-difficulty {
        width: 15%;
    }

    .col-calories {
        width: 10%;
    }

    .col-categories {
        width: 15%;
    }

    .col-meal-times {
        width: 15%;
    }

    .col-actions {
        width: 20%;
    }

    .success-message {
        position: fixed;
        top: 20px;
        right: 20px;
        background-color: #28a745;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        z-index: 1100;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }

    .filter-indicator {
        margin-top: 10px;
        font-size: 0.9em;
        color: #555;
    }

    .indicator-active {
        color: #28a745;
        font-weight: bold;
    }
</style>

<h3>Панель пошуку</h3>

<div class="section">
    <h4>Пошук</h4>
    <div class="row">
        <div class="col-md-4">
            <label for="searchTitle">Пошук за назвою</label>
            <input id="searchTitle" class="form-control" @bind="searchTitle" @bind:event="oninput" placeholder="Введіть назву..." />
        </div>
        <div class="col-md-4">
            <label for="searchDescription">Пошук за описом</label>
            <input id="searchDescription" class="form-control" @bind="searchDescription" @bind:event="oninput" placeholder="Введіть опис..." />
        </div>
        <div class="col-md-4">
            <label for="searchInstructions">Пошук за інструкціями</label>
            <input id="searchInstructions" class="form-control" @bind="searchInstructions" @bind:event="oninput" placeholder="Введіть інструкції..." />
        </div>
    </div>
    <div class="button-row">
        <button class="btn btn-yellow btn-halfwidth" @onclick="ApplySearch">Застосувати пошук</button>
        <button class="btn btn-red btn-halfwidth" @onclick="ClearSearch">Очистити пошук</button>
    </div>
    <div class="filter-indicator">
        Статус: <span class="@(IsSearchActive ? "indicator-active" : "")">@(IsSearchActive ? $"Пошук активний, застосовано: {GetActiveSearchParameters()}" : "Пошук не активний")</span>
    </div>
</div>

<div class="section">
    <h4>Сортування</h4>
    <div class="row">
        <div class="col-md-6">
            <label for="sortOption">Сортування</label>
            <select id="sortOption" class="form-control" @bind="sortOption">
                <option value="">Вибрати сортування</option>
                <option value="TitleAsc">Назва (А-Я)</option>
                <option value="TitleDesc">Назва (Я-А)</option>
                <option value="CookingTimeAsc">Час приготування (зростання)</option>
                <option value="CookingTimeDesc">Час приготування (спадання)</option>
                <option value="CaloriesAsc">Калорії (зростання)</option>
                <option value="CaloriesDesc">Калорії (спадання)</option>
            </select>
        </div>
    </div>
    <div class="button-row">
        <button class="btn btn-yellow btn-halfwidth" @onclick="ApplySorting">Застосувати сортування</button>
        <button class="btn btn-red btn-halfwidth" @onclick="ClearSorting">Відмінити сортування</button>
    </div>
    <div class="filter-indicator">
        Статус: <span class="@(IsSortActive ? "indicator-active" : "")">@(IsSortActive ? $"Сортування активне, застосовано: {GetActiveSortParameter()}" : "Сортування не активне")</span>
    </div>
</div>

<div class="section">
    <h4>Фільтрація</h4>
    <div class="row">
        <div class="col-md-3">
            <label for="difficultyLevelFilter">Рівень складності</label>
            <select id="difficultyLevelFilter" class="form-control" multiple @bind="selectedDifficultyLevelIds">
                @foreach (var level in difficultyLevels)
                {
                    <option value="@level.Id">@level.Name</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label for="categoryFilter">Категорії</label>
            <select id="categoryFilter" class="form-control" multiple @bind="selectedCategoryIds">
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label for="mealTimeFilter">Час прийому їжі</label>
            <select id="mealTimeFilter" class="form-control" multiple @bind="selectedMealTimeIds">
                @foreach (var mealTime in mealTimes)
                {
                    <option value="@mealTime.Id">@mealTime.Name</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <label for="ingredientFilter">Інгредієнти</label>
            <select id="ingredientFilter" class="form-control" multiple @bind="selectedIngredientIds">
                @foreach (var ingredient in ingredients)
                {
                    <option value="@ingredient.Id">@ingredient.Name</option>
                }
            </select>
        </div>
    </div>
    <div class="button-row">
        <button class="btn btn-yellow btn-halfwidth" @onclick="ApplyFilters">Застосувати фільтрацію</button>
        <button class="btn btn-red btn-halfwidth" @onclick="ClearFilters">Видалити фільтрацію</button>
    </div>
    <div class="filter-indicator">
        Статус: <span class="@(IsFilterActive ? "indicator-active" : "")">@(IsFilterActive ? $"Фільтрація активна, застосовано: {GetActiveFilterParameters()}" : "Фільтрація не активна")</span>
    </div>
</div>

<div class="mb-3">
    <button class="btn btn-red btn-fullwidth" @onclick="ClearAll">Очистити все</button>
</div>
<hr />
<div class="mb-3">
    <a href="/recipes/create" class="btn btn-success btn-fullwidth">Додати рецепт</a>
</div>
<h4 class="result-title">Результат пошуку</h4>

@if (filteredRecipes == null)
{
    <p>Завантаження рецептів...</p>
}
else if (!filteredRecipes.Any())
{
    <p>Рецептів не знайдено.</p>
}
else
{
    <table class="table table-striped table-fixed">
        <thead>
            <tr>
                <th class="col-title">Назва</th>
                <th class="col-description">Опис</th>
                <th class="col-cooking-time">Час приготування</th>
                <th class="col-difficulty">Рівень складності</th>
                <th class="col-calories">Калорії</th>
                <th class="col-categories">Категорії</th>
                <th class="col-meal-times">Час прийому</th>
                <th class="col-actions">Дії</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in pagedRecipes)
            {
                <tr>
                    <td class="col-title">@recipe.Title</td>
                    <td class="col-description description-cell">@recipe.Description</td>
                    <td class="col-cooking-time">@recipe.CookingTime хвилин</td>
                    <td class="col-difficulty">@(recipe.DifficultyLevel?.Name ?? "Немає")</td>
                    <td class="col-calories">@recipe.Calories ккал</td>
                    <td class="col-categories">
                        @if (recipe.RecipeCategories != null && recipe.RecipeCategories.Any())
                        {
                            @string.Join(", ", recipe.RecipeCategories.Select(rc => rc.Category?.Name ?? "Невідома категорія"))
                        }
                        else
                        {
                            <span>Немає категорій</span>
                        }
                    </td>
                    <td class="col-meal-times">
                        @if (recipe.RecipeMealTimes != null && recipe.RecipeMealTimes.Any())
                        {
                            @string.Join(", ", recipe.RecipeMealTimes.Select(rm => rm.MealTime?.Name ?? "Невідомий час"))
                        }
                        else
                        {
                            <span>Немає часу прийому</span>
                        }
                    </td>
                    <td class="col-actions">
                        <a href="/recipes/details/@recipe.Id" class="btn btn-info btn-sm action-button">Деталі</a>
                        <a href="/recipes/edit/@recipe.Id" class="btn btn-primary btn-sm action-button">Редагувати</a>
                        <button class="btn btn-danger btn-sm action-button" @onclick="() => ShowDeleteConfirmation(recipe.Id)">Видалити</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button class="btn btn-gold" disabled="@(currentPage == 1)" @onclick="PreviousPage">Попередня</button>
        <span>Сторінка @currentPage з @totalPages</span>
        <button class="btn btn-gold" disabled="@(currentPage == totalPages)" @onclick="NextPage">Наступна</button>
    </div>
}

@if (showDeleteConfirmation)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>Підтвердження видалення</h4>
            <p>Ви впевнені, що хочете видалити рецепт?</p>
            <button class="btn btn-danger" @onclick="ConfirmDelete">Видалити</button>
            <button class="btn btn-secondary" @onclick="CancelDelete">Скасувати</button>
        </div>
    </div>
}

@if (showSuccessMessage)
{
    <div class="success-message">
        Рецепт успішно видалено!
    </div>
}

@if (showSearchError)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>Помилка пошуку</h4>
            <p>Жодне поле пошуку не заповнене.</p>
            <button class="btn btn-secondary" @onclick="CloseSearchError">Закрити</button>
        </div>
    </div>
}

@if (showSortError)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>Помилка сортування</h4>
            <p>Сортування не вибране.</p>
            <button class="btn btn-secondary" @onclick="CloseSortError">Закрити</button>
        </div>
    </div>
}

@if (showFilterError)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h4>Помилка фільтрації</h4>
            <p>Жоден фільтр не вибраний.</p>
            <button class="btn btn-secondary" @onclick="CloseFilterError">Закрити</button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p class="text-danger">@errorMessage</p>
}

@code {
    private List<Recipe> recipes;
    private List<Recipe> filteredRecipes;
    private List<Recipe> pagedRecipes;
    private List<DifficultyLevel> difficultyLevels = new List<DifficultyLevel>();
    private List<Category> categories = new List<Category>();
    private List<MealTime> mealTimes = new List<MealTime>();
    private List<Ingredient> ingredients = new List<Ingredient>();
    private string searchTitle = "";
    private string searchDescription = "";
    private string searchInstructions = "";
    private string sortOption = "";
    private int[] selectedDifficultyLevelIds = Array.Empty<int>();
    private int[] selectedCategoryIds = Array.Empty<int>();
    private int[] selectedMealTimeIds = Array.Empty<int>();
    private int[] selectedIngredientIds = Array.Empty<int>();
    private string appliedSearchTitle = "";
    private string appliedSearchDescription = "";
    private string appliedSearchInstructions = "";
    private string appliedSortOption = "";
    private int[] appliedDifficultyLevelIds = Array.Empty<int>();
    private int[] appliedCategoryIds = Array.Empty<int>();
    private int[] appliedMealTimeIds = Array.Empty<int>();
    private int[] appliedIngredientIds = Array.Empty<int>();
    private string errorMessage;
    private bool showDeleteConfirmation;
    private bool showSuccessMessage;
    private bool showSearchError;
    private bool showSortError;
    private bool showFilterError;
    private int recipeIdToDelete;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)(filteredRecipes?.Count ?? 0) / pageSize);

    private bool IsSearchActive => !string.IsNullOrWhiteSpace(appliedSearchTitle) || !string.IsNullOrWhiteSpace(appliedSearchDescription) || !string.IsNullOrWhiteSpace(appliedSearchInstructions);
    private bool IsSortActive => !string.IsNullOrEmpty(appliedSortOption);
    private bool IsFilterActive => appliedDifficultyLevelIds.Any() || appliedCategoryIds.Any() || appliedMealTimeIds.Any() || appliedIngredientIds.Any();

    private string GetActiveSearchParameters()
    {
        var parameters = new List<string>();
        if (!string.IsNullOrWhiteSpace(appliedSearchTitle)) parameters.Add("Пошук за назвою");
        if (!string.IsNullOrWhiteSpace(appliedSearchDescription)) parameters.Add("Пошук за описом");
        if (!string.IsNullOrWhiteSpace(appliedSearchInstructions)) parameters.Add("Пошук за інструкціями");
        return string.Join(", ", parameters);
    }

    private string GetActiveSortParameter()
    {
        return appliedSortOption switch
        {
            "TitleAsc" => "Назва (А-Я)",
            "TitleDesc" => "Назва (Я-А)",
            "CookingTimeAsc" => "Час приготування (зростання)",
            "CookingTimeDesc" => "Час приготування (спадання)",
            "CaloriesAsc" => "Калорії (зростання)",
            "CaloriesDesc" => "Калорії (спадання)",
            _ => "Невідоме сортування"
        };
    }

    private string GetActiveFilterParameters()
    {
        var parameters = new List<string>();

        if (appliedDifficultyLevelIds.Any())
        {
            var names = difficultyLevels
                .Where(dl => appliedDifficultyLevelIds.Contains(dl.Id))
                .Select(dl => dl.Name)
                .ToList();
            if (names.Any()) parameters.Add($"Рівень складності: {string.Join(", ", names)}");
        }

        if (appliedCategoryIds.Any())
        {
            var names = categories
                .Where(c => appliedCategoryIds.Contains(c.Id))
                .Select(c => c.Name)
                .ToList();
            if (names.Any()) parameters.Add($"Категорії: {string.Join(", ", names)}");
        }

        if (appliedMealTimeIds.Any())
        {
            var names = mealTimes
                .Where(mt => appliedMealTimeIds.Contains(mt.Id))
                .Select(mt => mt.Name)
                .ToList();
            if (names.Any()) parameters.Add($"Час прийому їжі: {string.Join(", ", names)}");
        }

        if (appliedIngredientIds.Any())
        {
            var names = ingredients
                .Where(i => appliedIngredientIds.Contains(i.Id))
                .Select(i => i.Name)
                .ToList();
            if (names.Any()) parameters.Add($"Інгредієнти: {string.Join(", ", names)}");
        }

        return string.Join(", ", parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var options = new JsonSerializerOptions
                {
                    ReferenceHandler = ReferenceHandler.Preserve,
                    PropertyNameCaseInsensitive = true
                };

            var recipeResponse = await Http.GetAsync("https://localhost:7162/api/Recipe");
            if (!recipeResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Помилка завантаження рецептів: {recipeResponse.ReasonPhrase}";
                return;
            }
            var recipeJson = await recipeResponse.Content.ReadAsStringAsync();
            recipes = JsonSerializer.Deserialize<List<Recipe>>(recipeJson, options) ?? new List<Recipe>();
            filteredRecipes = recipes;

            var difficultyLevelResponse = await Http.GetAsync("https://localhost:7162/api/DifficultyLevel");
            if (!difficultyLevelResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Помилка завантаження рівнів складності: {difficultyLevelResponse.ReasonPhrase}";
                return;
            }
            var difficultyLevelJson = await difficultyLevelResponse.Content.ReadAsStringAsync();
            difficultyLevels = JsonSerializer.Deserialize<List<DifficultyLevel>>(difficultyLevelJson, options) ?? new List<DifficultyLevel>();

            var categoryResponse = await Http.GetAsync("https://localhost:7162/api/Category");
            if (!categoryResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Помилка завантаження категорій: {categoryResponse.ReasonPhrase}";
                return;
            }
            var categoryJson = await categoryResponse.Content.ReadAsStringAsync();
            categories = JsonSerializer.Deserialize<List<Category>>(categoryJson, options) ?? new List<Category>();

            var mealTimeResponse = await Http.GetAsync("https://localhost:7162/api/MealTime");
            if (!mealTimeResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Помилка завантаження часу прийому їжі: {mealTimeResponse.ReasonPhrase}";
                return;
            }
            var mealTimeJson = await mealTimeResponse.Content.ReadAsStringAsync();
            mealTimes = JsonSerializer.Deserialize<List<MealTime>>(mealTimeJson, options) ?? new List<MealTime>();

            var ingredientResponse = await Http.GetAsync("https://localhost:7162/api/Ingredient");
            if (!ingredientResponse.IsSuccessStatusCode)
            {
                errorMessage = $"Помилка завантаження інгредієнтів: {ingredientResponse.ReasonPhrase}";
                return;
            }
            var ingredientJson = await ingredientResponse.Content.ReadAsStringAsync();
            ingredients = JsonSerializer.Deserialize<List<Ingredient>>(ingredientJson, options) ?? new List<Ingredient>();

            if (!recipes.Any() || !difficultyLevels.Any() || !categories.Any() || !mealTimes.Any() || !ingredients.Any())
            {
                errorMessage = "Деякі дані не вдалося завантажити з сервера.";
            }

            UpdatePagedRecipes();
        }
        catch (JsonException ex)
        {
            errorMessage = $"Помилка десеріалізації: {ex.Message}";
            Console.WriteLine($"JsonException: {ex.StackTrace}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка завантаження даних: {ex.Message}";
            Console.WriteLine($"Exception: {ex.StackTrace}");
        }
    }

    private void ApplySearch()
    {
        if (string.IsNullOrWhiteSpace(searchTitle) && string.IsNullOrWhiteSpace(searchDescription) && string.IsNullOrWhiteSpace(searchInstructions))
        {
            showSearchError = true;
            return;
        }

        appliedSearchTitle = searchTitle;
        appliedSearchDescription = searchDescription;
        appliedSearchInstructions = searchInstructions;
        ApplyAllFilters();
    }

    private void ClearSearch()
    {
        searchTitle = "";
        searchDescription = "";
        searchInstructions = "";
        appliedSearchTitle = "";
        appliedSearchDescription = "";
        appliedSearchInstructions = "";
        ApplyAllFilters();
    }

    private void CloseSearchError()
    {
        showSearchError = false;
    }

    private void ApplySorting()
    {
        if (string.IsNullOrEmpty(sortOption))
        {
            showSortError = true;
            return;
        }

        appliedSortOption = sortOption;
        ApplyAllFilters();
    }

    private void ClearSorting()
    {
        sortOption = "";
        appliedSortOption = "";
        ApplyAllFilters();
    }

    private void CloseSortError()
    {
        showSortError = false;
    }

    private void ApplyFilters()
    {
        if (!selectedDifficultyLevelIds.Any() && !selectedCategoryIds.Any() && !selectedMealTimeIds.Any() && !selectedIngredientIds.Any())
        {
            showFilterError = true;
            return;
        }

        appliedDifficultyLevelIds = selectedDifficultyLevelIds.ToArray();
        appliedCategoryIds = selectedCategoryIds.ToArray();
        appliedMealTimeIds = selectedMealTimeIds.ToArray();
        appliedIngredientIds = selectedIngredientIds.ToArray();
        ApplyAllFilters();
    }

    private void ClearFilters()
    {
        selectedDifficultyLevelIds = Array.Empty<int>();
        selectedCategoryIds = Array.Empty<int>();
        selectedMealTimeIds = Array.Empty<int>();
        selectedIngredientIds = Array.Empty<int>();
        appliedDifficultyLevelIds = Array.Empty<int>();
        appliedCategoryIds = Array.Empty<int>();
        appliedMealTimeIds = Array.Empty<int>();
        appliedIngredientIds = Array.Empty<int>();
        ApplyAllFilters();
    }

    private void CloseFilterError()
    {
        showFilterError = false;
    }

    private void ApplyAllFilters()
    {
        filteredRecipes = recipes;

        if (!string.IsNullOrWhiteSpace(appliedSearchTitle))
        {
            filteredRecipes = filteredRecipes.Where(r => r.Title.Contains(appliedSearchTitle, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        if (!string.IsNullOrWhiteSpace(appliedSearchDescription))
        {
            filteredRecipes = filteredRecipes.Where(r => r.Description.Contains(appliedSearchDescription, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        if (!string.IsNullOrWhiteSpace(appliedSearchInstructions))
        {
            filteredRecipes = filteredRecipes.Where(r => r.Instructions.Contains(appliedSearchInstructions, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (appliedDifficultyLevelIds.Any())
        {
            filteredRecipes = filteredRecipes.Where(r => r.DifficultyLevelId.HasValue && appliedDifficultyLevelIds.Contains(r.DifficultyLevelId.Value)).ToList();
        }

        if (appliedCategoryIds.Any())
        {
            filteredRecipes = filteredRecipes.Where(r => r.RecipeCategories.Any(rc => appliedCategoryIds.Contains(rc.CategoryId))).ToList();
        }

        if (appliedMealTimeIds.Any())
        {
            filteredRecipes = filteredRecipes.Where(r => appliedMealTimeIds.All(mtId => r.RecipeMealTimes.Any(rm => rm.MealTimeId == mtId))).ToList();
        }

        if (appliedIngredientIds.Any())
        {
            filteredRecipes = filteredRecipes.Where(r => appliedIngredientIds.All(ingId => r.RecipeIngredients.Any(ri => ri.IngredientId == ingId))).ToList();
        }

        if (!string.IsNullOrEmpty(appliedSortOption))
        {
            filteredRecipes = appliedSortOption switch
            {
                "TitleAsc" => filteredRecipes.OrderBy(r => r.Title).ToList(),
                "TitleDesc" => filteredRecipes.OrderByDescending(r => r.Title).ToList(),
                "CookingTimeAsc" => filteredRecipes.OrderBy(r => r.CookingTime).ToList(),
                "CookingTimeDesc" => filteredRecipes.OrderByDescending(r => r.CookingTime).ToList(),
                "CaloriesAsc" => filteredRecipes.OrderBy(r => r.Calories).ToList(),
                "CaloriesDesc" => filteredRecipes.OrderByDescending(r => r.Calories).ToList(),
                _ => filteredRecipes.ToList()
            };
        }

        currentPage = 1;
        UpdatePagedRecipes();
    }

    private void ClearAll()
    {
        searchTitle = "";
        searchDescription = "";
        searchInstructions = "";
        sortOption = "";
        selectedDifficultyLevelIds = Array.Empty<int>();
        selectedCategoryIds = Array.Empty<int>();
        selectedMealTimeIds = Array.Empty<int>();
        selectedIngredientIds = Array.Empty<int>();
        appliedSearchTitle = "";
        appliedSearchDescription = "";
        appliedSearchInstructions = "";
        appliedSortOption = "";
        appliedDifficultyLevelIds = Array.Empty<int>();
        appliedCategoryIds = Array.Empty<int>();
        appliedMealTimeIds = Array.Empty<int>();
        appliedIngredientIds = Array.Empty<int>();
        filteredRecipes = recipes;
        currentPage = 1;
        UpdatePagedRecipes();
    }

    private void UpdatePagedRecipes()
    {
        pagedRecipes = filteredRecipes
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedRecipes();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagedRecipes();
        }
    }

    private void ShowDeleteConfirmation(int id)
    {
        recipeIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7162/api/Recipe/{recipeIdToDelete}");
            if (response.IsSuccessStatusCode)
            {
                recipes.RemoveAll(r => r.Id == recipeIdToDelete);
                filteredRecipes.RemoveAll(r => r.Id == recipeIdToDelete);
                UpdatePagedRecipes();
                showDeleteConfirmation = false;
                showSuccessMessage = true;
                await Task.Delay(3000);
                showSuccessMessage = false;
                StateHasChanged();
            }
            else
            {
                errorMessage = $"Помилка видалення рецепту: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Помилка: {ex.Message}";
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }
}